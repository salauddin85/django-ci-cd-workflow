name: Django CI/CD - Dev & Production

on:
  push:
    branches: [main, dev]      # Only main triggers production deploy
  workflow_dispatch:           # Manual trigger for dev
  pull_request:
    branches: [main, dev]

jobs:
  # ---------------------------
  # Job 1: Test + Coverage
  # ---------------------------
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.11, 3.12]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # -----------------------
      # Cache pip dependencies
      # -----------------------
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # -----------------------
      # Run Django Tests + Coverage
      # -----------------------
      - name: Run Django Tests with Coverage
        run: |
            pip install coverage
            coverage run --source='.' manage.py test
            coverage report
            coverage xml

      # -----------------------
      # Upload test logs / artifacts
      # -----------------------
      - name: Upload test logs
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ github.run_id }}  # unique per workflow run
          path: coverage.xml

  # ---------------------------
  # Job 2: Deploy Production (Blue-Green + Rollback - Dummy Testing)
  # ---------------------------
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # -----------------------
      # Simulated Blue-Green Deploy
      # -----------------------
      - name: Deploy to Green Environment (Simulation)
        run: |
          echo "üöÄ Simulating deploy to Green environment..."
          sleep 2
          echo "Deployment simulation done!"

      - name: Simulated Health Check Green
        run: |
          echo "üîé Simulating Green environment health check..."
          sleep 2
          echo "‚úÖ Green environment healthy (simulation)"

      - name: Switch Traffic (Blue ‚Üí Green) Simulation
        run: |
          echo "üîÑ Simulating traffic switch from Blue to Green..."
          sleep 2
          echo "Traffic switch simulation done!"

      - name: Rollback if Green Fails Simulation
        if: failure()
        run: |
          echo "‚ö†Ô∏è Simulating rollback to Blue environment..."
          sleep 2
          echo "Rollback simulation done!"
          exit 1

  # ---------------------------
  # Job 3: Dev Check (manual)
  # ---------------------------
  dev-check:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.11, 3.12]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

     
      - name: Run Django Tests
        run: python manage.py test

      - name: Dev Environment OK Message
        run: echo "‚úÖ All tests passed. Development environment is good!"
